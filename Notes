/***********************************************************************************************/
/* Example of a React canvas element that makes little balls on click */
/***********************************************************************************************/
import MatterCanvas from '../utilities/matter-react-utils/MatterCanvas';
import MatterBody from '../utilities/matter-react-utils/MatterBody';
import MatterEmitter from '../utilities/matter-react-utils/MatterEmitter';
import MatterMouse from '../utilities/matter-react-utils/MatterMouse';

import { useEffect, useState } from 'react';

import { Bodies, Composite } from 'matter-js'
import MatterAttractor from '../utilities/matter-react-utils/MatterAttractor';

export default function HeroCanvas(){

    const [engine, setEngine] = useState(null);
    const [mouseChildren, setMouseChildren] = useState([]);

    const makeParticle = (event) => {
        if(!engine) {
          console.warn('Engine is not done loading or is not specified. Cancelling makeParticle function call');
          return;
        }

        console.log(event.mouse);

        // Test making and returning a react component from within here
        const child = (
          <MatterAttractor attractorID='111' isMain={true} constraintOptions={{render: {visible: false}}}>
            <MatterBody bodyType='circle' bodyParams={{
              scaleOnResize: false,
              normalized:{
                radius: 0.01,
              },
              x:event.mouse.mousedownPosition.x,
              y:event.mouse.mousedownPosition.y,
              options: { isStatic: false }
            }}/>
          </MatterAttractor>
        );
        

        setMouseChildren([...mouseChildren, child]);
        // const particleSize = 40;
        // const {x,y} = event.mouse.mousedownPosition;
        // let newParticle = Bodies.circle(x, y, particleSize, {isStatic: false, render: {fillStyle: '#000', strokeStyle: '#222', lineWidth: 2}, friction: 0, frictionAir: 0.005});
        // Composite.add(engine.world, newParticle, {length: particleSize * 2})

    };

    return (
      <MatterCanvas backgroundColor={'transparent'} setEngineHandler={setEngine} engineOptions={{
        gravity: { y : 0}
      }}>
        <MatterMouse mouseDownHandler={makeParticle} />
        {/* <MatterBody 
          bodyType='rectangle' 
          bodyParams={{
            scaleOnResize: true,
            normalized:{
              pos: {x: 0.5, y: 1.05},
              width: 1,
              height: 0.1,
            },
            options: { isStatic: true }
          }}
        />
        <MatterEmitter /> */}
        {mouseChildren}
      </MatterCanvas>
    )
}


/***********************************************************************************************/